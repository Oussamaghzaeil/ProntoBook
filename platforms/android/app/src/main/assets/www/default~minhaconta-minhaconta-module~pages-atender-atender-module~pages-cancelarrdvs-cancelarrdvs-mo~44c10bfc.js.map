{"version":3,"sources":["webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/env.service.ts"],"names":[],"mappings":"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","file":"default~minhaconta-minhaconta-module~pages-atender-atender-module~pages-cancelarrdvs-cancelarrdvs-mo~44c10bfc.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Platform, NavController } from '@ionic/angular'\n//import { Network }      from '@ionic-native/network';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { AlertService } from 'src/app/services/alert.service';\nimport { EnvService } from './env.service';\n//import { tap }          from 'rxjs/operators';\n//import { User }         from '../models/user';\nimport { NgForm } from '@angular/forms';\nimport { environment } from 'src/environments/environment.prod';\n//import { Base64 } from '@ionic-native/base64/ngx';\n//import { Observable, throwError } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class AuthService {\n  private headers = new Headers();\n  isLoggedIn = false;\n  coletionsData: any;\n  constructor(\n    private http: HttpClient,\n    private platform: Platform,\n    //private network: Network,      \n    private env: EnvService,\n    private alertService: AlertService,\n    //private base64: Base64         \n  ) {\n    this.headers.append('Content-Type', 'application/json');\n  }\n\n  /*\n  CheckConnectivity() {\n    this.platform.ready().then(() => {\n      // if no internet, notice is a string\n      if (this.network.type == 'none' ) {         \n        this.alertService.presentAlert({\n          pTitle:'ATENÇÃO',\n          pSubtitle:'Autendicação no Sistema',\n          pMessage:'Não existe conexão de dados no momento. Tente novamente'\n        });\n      } else {\n          return false;\n      }\n    })\n  }\n  */\n  // função para verificar conexão de Host Engine API\n  EngineStatusConection = function (host: string) {\n    var started = new Date().getTime();\n    var url = host\n    fetch(url).then(response => {\n      if (response.status === 200) {\n        return response.statusText;\n      } else {\n        throw new Error('Algo deu errado no servidor da EngineAPI!');\n      }\n    }\n    ).then(response => {\n      console.debug(response);\n      sessionStorage.setItem('EngineStatusConection', \"ON\");\n      return true;\n    }\n    ).catch(error => {\n      //console.error(error);\n      sessionStorage.setItem('EngineStatusConection', 'OFF');\n      return false;\n    }\n    );\n  }\n\n  Login = async function (form: NgForm) {\n    //--------------------------------------------------------------------------------------------    \n    // Função Login \n    // Criação / Atualização: 24/07/2019 as 15:35          \n    // Por Gilson DeLima    \n    //--------------------------------------------------------------------------------------------\n    //this.alertService.showLoader(\"Processando... Aguarde por favor!!!\"); \n\n\n    //this.alertService.showLoader(\"Processando... Aguarde por favor!!!\");    \n    let json: string = JSON.stringify(form.value);\n    json = this.encripta(json);\n\n    let ParamDataJson = btoa(json); // encode string  \n    let strDataJson = atob(ParamDataJson);                // decode string\n    let StoreProcName = \"spUsuarioAuthentication\"\n    //console.log(strDataJson); \n    let ParamHashkey = sessionStorage.SessionHashkey;\n\n    const paramUrlAPI = this.env.API_HOST + this.env.API_URL + '/authentication?';\n    const paramsAPI = \"StoreProcName=\" + StoreProcName + \"&DataJson=\" + ParamDataJson; //+ \"&Hashkey=\"+ParamHashkey;\n\n    const EngineAPI = paramUrlAPI + paramsAPI\n    return new Promise((resolve, reject) => {\n      this.coletionsData = this.http.get(EngineAPI);\n      this.coletionsData.subscribe(\n        data => {\n          if (data[0].success) {\n            //sessionStorage.setItem('SessionUser', JSON.stringify(data[0].results));\n            sessionStorage.setItem('SessionUser', data[0].results);\n            sessionStorage.setItem(\"SessionHashkey\", data[0].hashkey);\n            sessionStorage.setItem(\"SessionConection\", \"1\");\n          }\n          else {\n            sessionStorage.setItem(\"SessionConection\", \"0\");\n            this.alertService.presentAlert({ pTitle: 'ATENÇÃO', pSubtitle: 'Autendicação no Sistema', pMessage: data[0].message });\n          }\n          resolve(data);\n        },\n        (error: any) => {\n          this.alertService.presentAlert({ pTitle: \"Atenção\", pSubtitle: \"Servidor Indisponível. Tente mais tarde!!!\", pMessage: \"Status Error:\" + error.status + \" | \" + error.statusText });\n          console.log(\"Error: \", error);\n        }\n      );\n    });\n  }\n\n\n  ////////////////////////////pic function //////////////////////////////////\n\n  QueryStoreImagem = async function (MetodoNameAPI: String, nomeImagem: string, rutaSalvar: string, imagem: any) {\n    //--------------------------------------------------------------------------------------------    \n    // Função para salvar IMAGE  \n    // Criação / Atualização: 29/07/2019 as 10:42          \n    // Por JClavo    \n    //--------------------------------------------------------------------------------------------\n\n    const paramUrlAPI = this.env.API_HOST + this.env.API_URL + '/' + MetodoNameAPI;\n\n    const formImagem = new FormData();\n    formImagem.append('nome', nomeImagem);\n    formImagem.append('ruta', rutaSalvar);\n    formImagem.append('imagem', imagem, imagem.name);\n\n    return new Promise(resolve => {\n      this.coletionsData = this.http.post(paramUrlAPI, formImagem);\n\n      this.coletionsData.subscribe(\n        data => {\n          resolve(data);\n        },\n        (error: any) => {\n          this.alertService.presentAlert({ pTitle: \"Atenção\", pSubtitle: \"Servidor ou Método Indisponível. Tente mais tarde!!!\", pMessage: \"Status Error:\" + error.status + \" | \" + error.statusText });\n          console.log(\"Error: \", error);\n        }\n      );\n    });\n  }\n\n  //////////////////////////////////////////////////////////////////////////\n\n  QueryStoreProc1 = async function (opcao: String, variable: string, consultaJson: string) {\n    //--------------------------------------------------------------------------------------------    \n    // Função Gerenerica de consulta no Service API  \n    // Criação / Atualização: 29/07/2019 as 10:42          \n    // Por Gilson DeLima    \n    //--------------------------------------------------------------------------------------------\n    // Params: opcao = ex: ConsultaGrupos, consultaJson = ex: paramsGrupo\n    //--------------------------------------------------------------------------------------------\n    //this.alertService.showLoader(\"Processando... Aguarde por favor!!!\"); \n           \n    let ParamDataJson = btoa(JSON.stringify(consultaJson)); // encode string  \n    let strDataJson = atob(ParamDataJson);                // decode string\n    console.log(strDataJson);\n\n    var a = strDataJson.substring(strDataJson.indexOf(':') + 2, strDataJson.indexOf('}') - 1)\n    console.log(a)\n    //ConsultaMenu\n    console.log(ParamDataJson)\n    const paramUrlAPI = this.env.API_HOST + this.env.API_URL + '/' + opcao + '?';\n    let go = consultaJson;\n    console.log(\"consultaJson\", consultaJson)\n    const paramsAPI = go;\n    console.log(paramsAPI);\n\n    const EngineAPI = paramUrlAPI + variable + \"=\" + paramsAPI\n    console.log(EngineAPI)\n    return new Promise(resolve => {\n      this.coletionsData = this.http.get(EngineAPI);\n      this.coletionsData.subscribe(data => {\n        resolve(data);\n        console.log(data);\n      },\n        (error: any) => {\n          this.alertService.presentAlert({ pTitle: \"Atenção\", pSubtitle: \"Servidor Indisponível. Tente mais tarde!!!\", pMessage: \"Status Error:\" + error.status + \" | \" + error.statusText });\n          //console.log(\"Error: \", error);\n        }\n      );\n    })\n  }\n\n\n  Register = async function (form: NgForm) {\n    //--------------------------------------------------------------------------------------------    \n    // Função Login \n    // Criação / Atualização: 29/07/2019 as 10:42          \n    // Por Gilson DeLima    \n    //--------------------------------------------------------------------------------------------\n    //this.alertService.showLoader(\"Processando... Aguarde por favor!!!\");  \n    let json: string = JSON.stringify(form.value);\n    json = this.encripta(json);\n      \n    let StoreProcName = \"spRegister\";\n    let ParamDataJson = btoa(json); // encode string  \n    //let strDataJson = atob(ParamDataJson);                // decode string\n    //console.log(strDataJson);              \n\n    const paramUrlAPI = this.env.API_HOST + this.env.API_URL + '/register?';\n    const paramsAPI = \"StoreProcName=\" + StoreProcName + \"&DataJson=\" + ParamDataJson;\n\n    const EngineAPI = paramUrlAPI + paramsAPI\n    return new Promise(resolve => {\n      this.coletionsData = this.http.get(EngineAPI);\n      this.coletionsData.subscribe(data => {\n        resolve(data);\n        //console.log(data);                              \n      },\n        (error: any) => {\n          this.alertService.presentAlert({ pTitle: \"Atenção\", pSubtitle: \"Servidor Indisponível. Tente mais tarde!!!\", pMessage: \"Status Error:\" + error.status + \" | \" + error.statusText });\n          console.log(\"Error: \", error);\n        }\n      );\n    })\n\n  }\n\n  QueryStoreProcDelete1 = function (opcao: String, procedure: String, variable: string, consultaJson: string) {\n    //--------------------------------------------------------------------------------------------    \n    // Função Gerenerica de consulta no Service API  \n    // Criação / Atualização: 29/07/2019 as 10:42          \n    // Por Gilson DeLima    \n    //--------------------------------------------------------------------------------------------\n    // Params: opcao = ex: ConsultaGrupos, consultaJson = ex: paramsGrupo\n    //--------------------------------------------------------------------------------------------\n    //this.alertService.showLoader(\"Processando... Aguarde por favor!!!\");        \n    let ParamDataJson = btoa(JSON.stringify(consultaJson)); // encode string  \n    let strDataJson = atob(ParamDataJson);                // decode string\n    console.log(strDataJson);\n\n    var a = strDataJson.substring(strDataJson.indexOf(':') + 2, strDataJson.indexOf('}') - 1)\n    console.log(a)\n    //ConsultaMenu\n    console.log(ParamDataJson)\n    const paramUrlAPI = this.env.API_HOST + this.env.API_URL + '/' + opcao + '?';\n    let go = consultaJson;\n    console.log(\"consultaJson\", consultaJson)\n    const paramsAPI = ParamDataJson;\n    console.log(paramsAPI);\n\n    const EngineAPI = paramUrlAPI + variable + \"=\" + paramsAPI + \"&spProcedure=\" + procedure\n    console.log(EngineAPI)\n    return new Promise(resolve => {\n      this.coletionsData = this.http.get(EngineAPI);\n      this.coletionsData.subscribe(data => {\n        resolve(data);\n        console.log(data);\n      },\n        (error: any) => {\n          this.alertService.presentAlert({ pTitle: \"Atenção\", pSubtitle: \"Servidor Indisponível. Tente mais tarde!!!\", pMessage: \"Status Error:\" + error.status + \" | \" + error.statusText });\n          //console.log(\"Error: \", error);\n        }\n      );\n    })\n  }\n\n\n  ////////////// encriptation function ////////////////////////////////////\n\n\n  private encripta(valor: string): string {\n    let retorno: string;\n    let stexto: string;\n    retorno = \"\";\n    try {\n      stexto = valor.trim();\n    } catch (err) {\n      stexto = valor;\n    }\n    if (stexto == null)\n      stexto = \"\";\n    if (stexto == \"\")\n      return stexto;\n    while (true) {\n      let letra: string;\n      let nnumero: number;\n      let snumero: string;\n      if (stexto.length > 1)\n        letra = stexto.substring(0, 1);\n      else\n        letra = stexto;\n\n      nnumero = letra.toString().charCodeAt(0);\n      nnumero += 166;\n      snumero = nnumero.toString();\n      if (snumero.length < 3)\n        snumero = \"0\" + snumero;\n      if (snumero.length < 3)\n        snumero = \"0\" + snumero;\n\n      retorno += snumero;\n      if (stexto.length > 1)\n        stexto = stexto.substring(1);\n      else\n        stexto = \"\";\n      if (stexto == \"\")\n        break;\n    }\n    return retorno;\n  }\n\n  /////////////////////////////////////////////////////////////////////////\n\n  QueryStoreProc = async function (MetodoNameAPI: String, StoreProcName: String, ParamsJson: any) {\n    //--------------------------------------------------------------------------------------------    \n    // Função Gerenerica de consulta no Service API  \n    // Criação / Atualização: 29/07/2019 as 10:42          \n    // Por Gilson DeLima    \n    //--------------------------------------------------------------------------------------------\n    // Params: opcao = ex: ConsultaGrupos, consultaJson = ex: paramsGrupo\n    //--------------------------------------------------------------------------------------------\n    //this.alertService.showLoader(\"Processando... Aguarde por favor!!!\");       \n\n    let json: string = JSON.stringify(ParamsJson);\n    json = this.encripta(json);\n    let ParamDataJson = btoa(json); // encode string  \n\n\n    //let strDataJson = atob(ParamDataJson);                // decode string\n    //console.log(strDataJson);              \n    //ConsultaMenu\n    const paramUrlAPI = this.env.API_HOST + this.env.API_URL + '/' + MetodoNameAPI + '?';\n    const paramsAPI = \"StoreProcName=\" + StoreProcName + \"&DataJson=\" + ParamDataJson;\n\n    const EngineAPI = paramUrlAPI + paramsAPI\n    console.log(EngineAPI)\n    return new Promise(resolve => {\n      this.coletionsData = this.http.get(EngineAPI);\n\n      this.coletionsData.subscribe(\n        data => {\n          resolve(data);\n        },\n        (error: any) => {\n          this.alertService.presentAlert({ pTitle: \"Atenção\", pSubtitle: \"Servidor Indisponível. Tente mais tarde!!!\", pMessage: \"Status Error:\" + error.status + \" | \" + error.statusText });\n          console.log(\"Error: \", error);\n        }\n      );\n    });\n  }\n\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnvService {  \n  //API_HOST   = \"http://200.196.251.212\"; \n  //API_HOST   = \"http://localhost\"; \n  API_HOST   = \"http://200.196.251.212\"; \n  API_NAME   =\"/ServiceProntoBook/\"\n\n  //API_HOST = \"http://192.168.0.121\";\n  //API_HOST = \"http://192.168.15.13\";  \n  API_URL = \"/ServiceProntoBook/api/Geral\";  \n  APP_NAME  = \"ProntoBook\";\n    constructor() { }\n}\n"],"sourceRoot":""}